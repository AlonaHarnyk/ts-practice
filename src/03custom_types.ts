// 1. Type Alias (–ü—Å–µ–≤–¥–æ–Ω—ñ–º —Ç–∏–ø—É)
// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ —Ç–∏–ø User, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å name (—Ä—è–¥–æ–∫) —ñ age (—á–∏—Å–ª–æ). –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é greetUser, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –æ–±‚Äô—î–∫—Ç User —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ —ñ–∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º.

// type User = {
//   name: string;
//   age: number;
// };

// const greetUser = (user: User): string => {
//   return `Hello, ${user.name}`;
// };

// const user1 = {
//   name: "John",
//   age: 20,
// };

// console.log(greetUser(user1));

//   2. Interface (–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Car –∑ –ø–æ–ª—è–º–∏ brand (—Ä—è–¥–æ–∫) —ñ year (—á–∏—Å–ª–æ). –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getCarInfo, —è–∫–∞ –ø—Ä–∏–π–º–∞—î Car —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∞–≤—Ç–æ.

// interface Car {
//   brand: string;
//   year: number;
// }

// const getCarInfo = (car: Car): string => {
//   return `this is ${car.brand} of ${car.year} year`;
// };

// const car1 = {
//   brand: "Mercedes",
//   year: 2024,
// };

// console.log(getCarInfo(car1));

// 3. Type vs Interface
// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ type —ñ interface –¥–ª—è –æ–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —ñ–º–µ–Ω–µ–º (name) —Ç–∞ —Ä–æ–ª–ª—é (role: "admin" | "user"). –ü–æ–∫–∞–∂–∏, —è–∫ —ó—Ö –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏.

// type UserType = {
//   name: string;
//   role: "admin" | "user";
// };

// interface UserInterface {
//   name: string;
//   role: "admin" | "user";
// }

// type SuperUserType = UserType & { permissions: string[] };

// interface SuperUserInterface extends UserInterface {
//   permissions: string[];
// }

// const user: SuperUserType = {
//   name: "John",
//   role: "admin",
//   permissions: ["read", "edit"],
// };
// console.log("üöÄ ~ user:", user);

// const user2: SuperUserInterface = {
//   name: "John",
//   role: "admin",
//   permissions: ["read", "edit"],
// };
// console.log("üöÄ ~ user2:", user2);

// 4. Custom Union Type
// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ type –¥–ª—è Shape, —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ circle (–∑ —Ä–∞–¥—ñ—É—Å–æ–º) –∞–±–æ rectangle (–∑ —à–∏—Ä–∏–Ω–æ—é —ñ –≤–∏—Å–æ—Ç–æ—é). –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getArea, —è–∫–∞ –æ–±—á–∏—Å–ª—é—î –ø–ª–æ—â—É —Ñ—ñ–≥—É—Ä–∏.

// enum ShapeTypes {
//   Circle = "circle",
//   Rectangle = "rectangle",
// }

// type Shape =
//   | {
//       type: ShapeTypes.Circle;
//       radius: number;
//     }
//   | {
//       type: ShapeTypes.Rectangle;
//       width: number;
//       height: number;
//     };

// const getArea = (shape: Shape): number => {
//   if (shape.type === ShapeTypes.Circle) {
//     return Math.PI * shape.radius ** 2;
//   } else {
//     return shape.width * shape.height;
//   }
// };

// const circle: Shape = {
//   type: ShapeTypes.Circle,
//   radius: 5,
// };

// const rectangle: Shape = {
//   type: ShapeTypes.Rectangle,
//   width: 2,
//   height: 3,
// };

// console.log(getArea(circle));
// console.log(getArea(rectangle));

// 5. Custom Mapped Type
// –ó–∞–≤–¥–∞–Ω–Ω—è:
// –°—Ç–≤–æ—Ä–∏ mapped type ReadonlyUser, —è–∫–∏–π —Ä–æ–±–∏—Ç—å —É—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ User –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è (readonly).

// type User = {
//   name: string;
//   age: number;
// };

// type ReadonlyUser = Readonly<User>;

// const user: ReadonlyUser = {
//   name: "John",
//   age: 20,
// };

// user.age = 30; // Error

// console.log("üöÄ ~ user:", user);
